package com.example.proyecto_final_hoteleros.client.utils;

import android.content.Context;
import android.util.Log;
import android.widget.Toast;
import com.example.proyecto_final_hoteleros.client.data.model.Reservation;
import com.example.proyecto_final_hoteleros.client.ui.fragment.HistorialFragment;
import java.util.ArrayList;
import java.util.List;

/**
 * ‚úÖ HELPER ESPEC√çFICO PARA TESTING DE RESERVAS Y FLUJO COMPLETO
 * Facilita las pruebas del sistema de gesti√≥n de reservas con todos los estados
 */
public class ReservationTestingHelper {

    private static final String TAG = "ReservationTestingHelper";

    private Context context;
    private HistorialFragment historialFragment;
    private ReservationDebugManager debugManager;

    // ‚úÖ CONFIGURACI√ìN DE TESTING
    private boolean verboseLogging = true;
    private double[] testTaxiAmounts = {500.0, 800.0, 1000.0, 1200.0, 1500.0}; // Diferentes montos para probar

    public ReservationTestingHelper(Context context, HistorialFragment fragment) {
        this.context = context;
        this.historialFragment = fragment;
        this.debugManager = ReservationDebugManager.getInstance();

        Log.d(TAG, "üß™ ReservationTestingHelper inicializado");
    }

    // ========== M√âTODOS PARA CREAR ESCENARIOS DE TESTING ==========

    /**
     * ‚úÖ CREAR SUITE COMPLETA DE TESTING CON TODOS LOS ESCENARIOS
     */
    public List<Reservation> createFullTestingSuite() {
        Log.d(TAG, "üß™ ========== CREANDO SUITE COMPLETA DE TESTING ==========");

        List<Reservation> testReservations = new ArrayList<>();

        // ‚úÖ ESCENARIO 1: PR√ìXIMAS - Diferentes precios para testing de taxi
        testReservations.add(createScenario_UpcomingLowPrice());
        testReservations.add(createScenario_UpcomingHighPrice());
        testReservations.add(createScenario_UpcomingMidPrice());

        // ‚úÖ ESCENARIO 2: ACTUALES - Diferentes sub-estados
        testReservations.add(createScenario_ActiveJustCheckedIn());
        testReservations.add(createScenario_ActiveStaying());
        testReservations.add(createScenario_ActiveCheckoutPending());

        // ‚úÖ ESCENARIO 3: COMPLETADAS - Diferentes estados de taxi y review
        testReservations.add(createScenario_CompletedWithTaxiAvailable());
        testReservations.add(createScenario_CompletedWithTaxiUsed());
        testReservations.add(createScenario_CompletedNoTaxiLowAmount());
        testReservations.add(createScenario_CompletedWithReviewSubmitted());

        logTestingSuiteCreated(testReservations);
        return testReservations;
    }

    // ========== ESCENARIOS ESPEC√çFICOS ==========

    private Reservation createScenario_UpcomingLowPrice() {
        Reservation reservation = debugManager.createTestReservation("Hotel B√°sico Test", 400.0);
        debugManager.forceToUpcoming(reservation);

        if (verboseLogging) {
            Log.d(TAG, "üìÖ ESCENARIO: Pr√≥ximo con precio bajo (No califica taxi)");
            Log.d(TAG, "   - Precio: S/ 400 (< m√≠nimo para taxi)");
            Log.d(TAG, "   - Puede modificar: " + reservation.canModify());
        }

        return reservation;
    }

    private Reservation createScenario_UpcomingHighPrice() {
        Reservation reservation = debugManager.createTestReservation("Hotel Premium Test", 1200.0);
        debugManager.forceToUpcoming(reservation);

        // Agregar servicios para asegurar que califique para taxi
        reservation.addService("Spa Premium", 150.0, 1);
        reservation.addService("Room Service Gourmet", 100.0, 1);

        if (verboseLogging) {
            Log.d(TAG, "üìÖ ESCENARIO: Pr√≥ximo con precio alto (Califica taxi)");
            Log.d(TAG, "   - Precio base: S/ 1200");
            Log.d(TAG, "   - Con servicios: S/ " + reservation.getFinalTotal());
            Log.d(TAG, "   - Califica taxi: " + (reservation.getFinalTotal() >= debugManager.getTestTaxiMinAmount()));
        }

        return reservation;
    }

    private Reservation createScenario_UpcomingMidPrice() {
        Reservation reservation = debugManager.createTestReservation("Hotel Medio Test", 750.0);
        debugManager.forceToUpcoming(reservation);

        // Agregar algunos servicios
        reservation.addService("Desayuno Continental", 45.0, 2);

        if (verboseLogging) {
            Log.d(TAG, "üìÖ ESCENARIO: Pr√≥ximo precio medio (Borderline taxi)");
            Log.d(TAG, "   - Total: S/ " + reservation.getFinalTotal());
        }

        return reservation;
    }

    private Reservation createScenario_ActiveJustCheckedIn() {
        Reservation reservation = debugManager.createTestReservation("Hotel Check-in Test", 900.0);
        debugManager.forceToActive(reservation);

        if (verboseLogging) {
            Log.d(TAG, "üè® ESCENARIO: Activo - Reci√©n llegado");
            Log.d(TAG, "   - Sub-estado: " + reservation.getSubStatus());
            Log.d(TAG, "   - Puede modificar: " + reservation.canModify());
        }

        return reservation;
    }

    private Reservation createScenario_ActiveStaying() {
        Reservation reservation = debugManager.createTestReservation("Hotel Estad√≠a Test", 1100.0);
        debugManager.forceToStaying(reservation);

        if (verboseLogging) {
            Log.d(TAG, "üõèÔ∏è ESCENARIO: Activo - Estad√≠a en curso");
            Log.d(TAG, "   - Sub-estado: " + reservation.getSubStatus());
            Log.d(TAG, "   - Servicios: " + reservation.getServices().size());
            Log.d(TAG, "   - Puede modificar: " + reservation.canModify());
        }

        return reservation;
    }

    private Reservation createScenario_ActiveCheckoutPending() {
        Reservation reservation = debugManager.createTestReservation("Hotel Checkout Test", 1300.0);
        debugManager.forceToCheckoutPending(reservation);

        if (verboseLogging) {
            Log.d(TAG, "‚è≥ ESCENARIO: Activo - Checkout pendiente");
            Log.d(TAG, "   - Sub-estado: " + reservation.getSubStatus());
            Log.d(TAG, "   - Esperando aprobaci√≥n del hotel");
        }

        return reservation;
    }

    private Reservation createScenario_CompletedWithTaxiAvailable() {
        Reservation reservation = debugManager.createTestReservation("Hotel Taxi Disponible", 1400.0);
        debugManager.forceToCompletedWithTaxi(reservation);

        if (verboseLogging) {
            Log.d(TAG, "‚úÖ ESCENARIO: Completado - Taxi disponible");
            Log.d(TAG, "   - Total: S/ " + reservation.getFinalTotal());
            Log.d(TAG, "   - Califica taxi: " + reservation.isEligibleForFreeTaxi());
            Log.d(TAG, "   - Review enviado: " + reservation.isReviewSubmitted());
        }

        return reservation;
    }

    private Reservation createScenario_CompletedWithTaxiUsed() {
        Reservation reservation = debugManager.createTestReservation("Hotel Taxi Usado", 1600.0);
        debugManager.forceToCompletedWithTaxi(reservation);
        reservation.setHasTaxiService(true); // Simular que ya us√≥ el taxi

        if (verboseLogging) {
            Log.d(TAG, "üöñ ESCENARIO: Completado - Taxi ya usado");
            Log.d(TAG, "   - Taxi service: " + reservation.hasTaxiService());
        }

        return reservation;
    }

    private Reservation createScenario_CompletedNoTaxiLowAmount() {
        Reservation reservation = debugManager.createTestReservation("Hotel Sin Taxi", 600.0);
        debugManager.forceToCompletedNoTaxi(reservation);

        if (verboseLogging) {
            Log.d(TAG, "‚ùå ESCENARIO: Completado - No califica taxi");
            Log.d(TAG, "   - Total: S/ " + reservation.getFinalTotal());
            Log.d(TAG, "   - No califica para taxi por monto insuficiente");
        }

        return reservation;
    }

    private Reservation createScenario_CompletedWithReviewSubmitted() {
        Reservation reservation = debugManager.createTestReservation("Hotel Review Test", 1100.0);
        debugManager.forceToCompletedWithReview(reservation);

        if (verboseLogging) {
            Log.d(TAG, "‚≠ê ESCENARIO: Completado - Review enviado");
            Log.d(TAG, "   - Review enviado: " + reservation.isReviewSubmitted());
            Log.d(TAG, "   - Bot√≥n debe mostrar 'Ver factura'");
        }

        return reservation;
    }

    // ========== M√âTODOS DE VERIFICACI√ìN ==========

    /**
     * ‚úÖ VERIFICAR QUE TODOS LOS ESTADOS SEAN CORRECTOS
     */
    public boolean verifyAllScenarios(List<Reservation> reservations) {
        Log.d(TAG, "üîç ========== VERIFICANDO TODOS LOS ESCENARIOS ==========");

        boolean allValid = true;
        int scenarioNumber = 1;

        for (Reservation reservation : reservations) {
            boolean isValid = verifyReservationState(reservation, scenarioNumber);
            if (!isValid) {
                allValid = false;
                Log.e(TAG, "‚ùå Escenario " + scenarioNumber + " FALL√ì la verificaci√≥n");
            } else {
                Log.d(TAG, "‚úÖ Escenario " + scenarioNumber + " verificado correctamente");
            }
            scenarioNumber++;
        }

        Log.d(TAG, "üèÅ RESULTADO FINAL: " + (allValid ? "TODOS LOS ESCENARIOS V√ÅLIDOS" : "ALGUNOS ESCENARIOS FALLARON"));

        if (context != null) {
            String message = allValid ?
                    "‚úÖ Todos los escenarios verificados correctamente" :
                    "‚ö†Ô∏è Algunos escenarios requieren revisi√≥n";
            Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
        }

        return allValid;
    }

    private boolean verifyReservationState(Reservation reservation, int scenarioNumber) {
        Log.d(TAG, "üîç Verificando escenario " + scenarioNumber + ": " + reservation.getHotelName());

        // Verificar que el estado sea coherente
        boolean stateValid = reservation.getStatus() >= Reservation.STATUS_UPCOMING &&
                reservation.getStatus() <= Reservation.STATUS_COMPLETED;

        if (!stateValid) {
            Log.e(TAG, "   ‚ùå Estado inv√°lido: " + reservation.getStatus());
            return false;
        }

        // Verificar coherencia de taxi seg√∫n monto
        double total = reservation.getFinalTotal();
        double minTaxi = debugManager.getTestTaxiMinAmount();
        boolean shouldQualifyForTaxi = total >= minTaxi;

        if (reservation.getStatus() == Reservation.STATUS_COMPLETED) {
            if (shouldQualifyForTaxi && !reservation.isEligibleForFreeTaxi()) {
                Log.w(TAG, "   ‚ö†Ô∏è Deber√≠a calificar para taxi pero no califica (Total: S/ " + total + " >= S/ " + minTaxi + ")");
            }
        }

        // Verificar permisos de modificaci√≥n seg√∫n estado
        switch (reservation.getStatus()) {
            case Reservation.STATUS_UPCOMING:
                if (!reservation.canModify()) {
                    Log.w(TAG, "   ‚ö†Ô∏è Reserva pr√≥xima deber√≠a permitir modificaci√≥n");
                }
                break;
            case Reservation.STATUS_COMPLETED:
                if (reservation.canModify()) {
                    Log.w(TAG, "   ‚ö†Ô∏è Reserva completada NO deber√≠a permitir modificaci√≥n");
                }
                break;
        }

        Log.d(TAG, "   ‚úÖ Estado verificado: " + debugManager.getDetailedStatus(reservation));
        return true;
    }

    // ========== M√âTODOS DE TESTING AUTOMATIZADO ==========

    /**
     * ‚úÖ EJECUTAR TESTING AUTOMATIZADO DE FLUJO COMPLETO
     */
    public void runAutomatedFlowTest() {
        Log.d(TAG, "ü§ñ ========== TESTING AUTOMATIZADO DE FLUJO ==========");

        if (!debugManager.isDebugModeEnabled()) {
            Log.w(TAG, "‚ö†Ô∏è Debug mode deshabilitado, no se puede ejecutar testing automatizado");
            if (context != null) {
                Toast.makeText(context, "‚ö†Ô∏è Debug mode deshabilitado", Toast.LENGTH_SHORT).show();
            }
            return;
        }

        // Crear reserva de testing
        Reservation testReservation = debugManager.createTestReservation("Hotel Flujo Autom√°tico", 900.0);

        // Ejecutar flujo automatizado
        debugManager.simulateFullReservationFlow(testReservation, new ReservationDebugManager.FlowCallback() {
            @Override
            public void onStateChanged(String stateName, Reservation reservation) {
                Log.d(TAG, "üîÑ Flujo autom√°tico - Estado: " + stateName);
                if (context != null) {
                    Toast.makeText(context, "ü§ñ " + stateName, Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFlowCompleted() {
                Log.d(TAG, "üèÅ Flujo autom√°tico completado exitosamente");
                if (context != null) {
                    Toast.makeText(context, "‚úÖ Flujo autom√°tico completado", Toast.LENGTH_LONG).show();
                }

                // Verificar estado final
                verifyReservationState(testReservation, 999); // N√∫mero especial para test autom√°tico
            }
        });
    }

    /**
     * ‚úÖ TESTING DE DIFERENTES MONTOS DE TAXI
     */
    public void testTaxiAmounts() {
        Log.d(TAG, "üöï ========== TESTING DE MONTOS DE TAXI ==========");

        for (double taxiAmount : testTaxiAmounts) {
            Log.d(TAG, "üß™ Probando monto m√≠nimo taxi: S/ " + taxiAmount);

            debugManager.setTestTaxiMinAmount(taxiAmount);

            // Crear reserva con monto justo por debajo del m√≠nimo
            double testAmount = taxiAmount - 50.0;
            Reservation reservationBelow = debugManager.createTestReservation("Test Below " + taxiAmount, testAmount);
            boolean shouldNotQualify = testAmount < taxiAmount;

            Log.d(TAG, "   üìä Monto S/ " + testAmount + " < S/ " + taxiAmount + " = " + shouldNotQualify);

            // Crear reserva con monto justo por encima del m√≠nimo
            testAmount = taxiAmount + 50.0;
            Reservation reservationAbove = debugManager.createTestReservation("Test Above " + taxiAmount, testAmount);
            boolean shouldQualify = testAmount >= taxiAmount;

            Log.d(TAG, "   üìä Monto S/ " + testAmount + " >= S/ " + taxiAmount + " = " + shouldQualify);
        }

        // Restaurar monto original
        debugManager.setTestTaxiMinAmount(800.0); // Valor por defecto
        Log.d(TAG, "üîÑ Monto de taxi restaurado a valor por defecto: S/ 800");
    }

    // ========== M√âTODOS DE UTILIDAD ==========

    private void logTestingSuiteCreated(List<Reservation> reservations) {
        Log.d(TAG, "üìã ========== SUITE DE TESTING CREADA ==========");
        Log.d(TAG, "Total de escenarios: " + reservations.size());

        int upcoming = 0, active = 0, completed = 0;
        for (Reservation r : reservations) {
            switch (r.getStatus()) {
                case Reservation.STATUS_UPCOMING: upcoming++; break;
                case Reservation.STATUS_ACTIVE: active++; break;
                case Reservation.STATUS_COMPLETED: completed++; break;
            }
        }

        Log.d(TAG, "Distribuci√≥n:");
        Log.d(TAG, "  - Pr√≥ximas: " + upcoming);
        Log.d(TAG, "  - Actuales: " + active);
        Log.d(TAG, "  - Completadas: " + completed);
        Log.d(TAG, "==========================================");
    }

    public void setVerboseLogging(boolean verbose) {
        this.verboseLogging = verbose;
        Log.d(TAG, "üîä Verbose logging: " + (verbose ? "ENABLED" : "DISABLED"));
    }

    /**
     * ‚úÖ CREAR REPORTE COMPLETO DE TESTING
     */
    public String generateTestingReport(List<Reservation> reservations) {
        StringBuilder report = new StringBuilder();
        report.append("üß™ REPORTE DE TESTING DE RESERVAS\n");
        report.append("=====================================\n\n");

        report.append("üìä RESUMEN:\n");
        report.append("- Total de escenarios: ").append(reservations.size()).append("\n");
        report.append("- Modo debug: ").append(debugManager.isDebugModeEnabled() ? "HABILITADO" : "DESHABILITADO").append("\n");
        report.append("- Monto m√≠nimo taxi: S/ ").append(debugManager.getTestTaxiMinAmount()).append("\n\n");

        report.append("üìã DETALLE DE ESCENARIOS:\n");
        for (int i = 0; i < reservations.size(); i++) {
            Reservation r = reservations.get(i);
            report.append(i + 1).append(". ").append(r.getHotelName()).append("\n");
            report.append("   Estado: ").append(debugManager.getDetailedStatus(r)).append("\n");
            report.append("   Total: S/ ").append(r.getFinalTotal()).append("\n");
            report.append("   Taxi: ").append(r.isEligibleForFreeTaxi() ? "‚úÖ Califica" : "‚ùå No califica").append("\n\n");
        }

        return report.toString();
    }
}