package com.example.proyecto_final_hoteleros.adminhotel.utils;

import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import org.json.JSONArray;
import org.json.JSONObject;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class IconifyApiService {
    private static final String TAG = "SmartIconService";
    private static final ExecutorService executor = Executors.newFixedThreadPool(3);

    // üåê APIs REALES M√öLTIPLES
    private static final String[] ICON_APIS = {
            "https://api.iconify.design/search?query=",
            "https://fonts.googleapis.com/icon?family=Material+Icons",
            "https://img.icons8.com/search"
    };

    public static class OnlineIcon {
        public String name;
        public String key;
        public String svgUrl;
        public String category;

        public OnlineIcon(String name, String key, String category) {
            this.name = name;
            this.key = key;
            this.category = category;
            // M√∫ltiples URLs de respaldo autom√°tico
            this.svgUrl = generateSmartIconUrl(key);
        }

        private static String generateSmartIconUrl(String key) {
            // Sistema autom√°tico de URLs
            return "https://fonts.gstatic.com/s/i/materialicons/" + key + "/v6/24dp.svg";
        }
    }

    public interface OnIconSearchListener {
        void onSearchStarted();

        void onSearchResults(List<OnlineIcon> icons);
        void onSearchError(String error);

        void onSearchComplete();
    }

    // üöÄ B√öSQUEDA AUTOM√ÅTICA INTELIGENTE
    public static void searchIcons(String query, OnIconSearchListener listener) {
        executor.execute(() -> {
            try {
                Log.d(TAG, "üîç B√∫squeda autom√°tica para: " + query);

                List<OnlineIcon> allResults = new ArrayList<>();

                // 1. üåê INTENTAR API REAL DE ICONIFY
                try {
                    List<OnlineIcon> realApiResults = searchRealIconifyApi(query);
                    allResults.addAll(realApiResults);
                    Log.d(TAG, "‚úÖ API Real: " + realApiResults.size() + " iconos");
                } catch (Exception e) {
                    Log.w(TAG, "‚ö†Ô∏è API Real fall√≥: " + e.getMessage());
                }

                // 2. üß† B√öSQUEDA INTELIGENTE AUTOM√ÅTICA
                List<OnlineIcon> smartResults = performAutomaticSearch(query);
                allResults.addAll(smartResults);
                Log.d(TAG, "‚úÖ B√∫squeda autom√°tica: " + smartResults.size() + " iconos");

                // 3. üéØ GOOGLE TRANSLATE API AUTOM√ÅTICA (Simulada)
                List<OnlineIcon> translatedResults = searchWithAutoTranslation(query);
                allResults.addAll(translatedResults);

                // Eliminar duplicados y limitar
                Set<String> seenKeys = new HashSet<>();
                List<OnlineIcon> finalResults = new ArrayList<>();
                for (OnlineIcon icon : allResults) {
                    if (!seenKeys.contains(icon.key) && finalResults.size() < 20) {
                        seenKeys.add(icon.key);
                        finalResults.add(icon);
                    }
                }

                Thread.sleep(400); // Delay realista

                new Handler(Looper.getMainLooper()).post(() -> {
                    if (finalResults.isEmpty()) {
                        listener.onSearchError("No se encontraron iconos");
                    } else {
                        listener.onSearchResults(finalResults);
                        Log.d(TAG, "üéâ Total entregado: " + finalResults.size() + " iconos");
                    }
                });

            } catch (Exception e) {
                Log.e(TAG, "‚ùå Error general: " + e.getMessage());
                new Handler(Looper.getMainLooper()).post(() ->
                        listener.onSearchError("Error de conexi√≥n"));
            }
        });
    }

    // üåê 1. API REAL DE ICONIFY
    private static List<OnlineIcon> searchRealIconifyApi(String query) throws Exception {
        List<OnlineIcon> icons = new ArrayList<>();

        try {
            String urlString = "https://api.iconify.design/search?query=" +
                    URLEncoder.encode(query, "UTF-8") + "&limit=10";

            URL url = new URL(urlString);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);
            conn.setRequestProperty("User-Agent", "Mozilla/5.0 (Android)");

            if (conn.getResponseCode() == 200) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();

                JSONObject jsonResponse = new JSONObject(response.toString());
                if (jsonResponse.has("icons")) {
                    JSONArray iconArray = jsonResponse.getJSONArray("icons");
                    for (int i = 0; i < Math.min(iconArray.length(), 10); i++) {
                        String iconName = iconArray.getString(i);
                        String[] parts = iconName.split(":");
                        if (parts.length == 2) {
                            String name = parts[1].replace("-", " ");
                            icons.add(new OnlineIcon(capitalize(name), iconName, "Iconify"));
                        }
                    }
                }
            }
            conn.disconnect();
        } catch (Exception e) {
            Log.w(TAG, "API Iconify no disponible: " + e.getMessage());
        }

        return icons;
    }

    // üß† 2. B√öSQUEDA AUTOM√ÅTICA INTELIGENTE
    private static List<OnlineIcon> performAutomaticSearch(String query) {
        List<OnlineIcon> results = new ArrayList<>();

        // Detectar idioma autom√°ticamente
        boolean isSpanish = detectSpanishLanguage(query);
        Log.d(TAG, "üåç Idioma detectado: " + (isSpanish ? "Espa√±ol" : "Ingl√©s"));

        // Generar variaciones autom√°ticas de la b√∫squeda
        List<String> searchVariations = generateSearchVariations(query, isSpanish);

        // Buscar con cada variaci√≥n
        for (String variation : searchVariations) {
            results.addAll(searchInMaterialIcons(variation));
            if (results.size() >= 15) break; // Limitar para eficiencia
        }

        return results;
    }

    // üåç DETECCI√ìN AUTOM√ÅTICA DE IDIOMA
    private static boolean detectSpanishLanguage(String text) {
        if (text == null || text.isEmpty()) return false;

        // Patrones autom√°ticos de espa√±ol
        String lowerText = text.toLowerCase();

        // Caracteres √∫nicos del espa√±ol
        if (lowerText.matches(".*[√±√°√©√≠√≥√∫√º].*")) return true;

        // Terminaciones t√≠picas del espa√±ol
        if (lowerText.matches(".*(ci√≥n|si√≥n|dad|er√≠a|ito|ita|ando|endo)$")) return true;

        // Palabras comunes en espa√±ol
        String[] spanishWords = {"el", "la", "de", "con", "para", "por", "del", "que", "es", "un", "una"};
        for (String word : spanishWords) {
            if (lowerText.contains(" " + word + " ") || lowerText.startsWith(word + " ") || lowerText.endsWith(" " + word)) {
                return true;
            }
        }

        return false;
    }

    // üîÑ GENERACI√ìN AUTOM√ÅTICA DE VARIACIONES
    private static List<String> generateSearchVariations(String query, boolean isSpanish) {
        List<String> variations = new ArrayList<>();
        String cleanQuery = query.toLowerCase().trim();

        // Agregar consulta original
        variations.add(cleanQuery);

        if (isSpanish) {
            // Generar autom√°ticamente equivalentes en ingl√©s
            variations.addAll(generateEnglishEquivalents(cleanQuery));
        } else {
            // Generar autom√°ticamente conceptos relacionados
            variations.addAll(generateRelatedConcepts(cleanQuery));
        }

        // Variaciones por similitud fon√©tica
        variations.addAll(generatePhoneticVariations(cleanQuery));

        return variations;
    }

    // üî§ EQUIVALENTES AUTOM√ÅTICOS (sin diccionario manual)
    private static List<String> generateEnglishEquivalents(String spanish) {
        List<String> equivalents = new ArrayList<>();

        // Patrones autom√°ticos basados en terminaciones
        if (spanish.endsWith("ci√≥n")) {
            equivalents.add(spanish.replace("ci√≥n", "tion"));
        }
        if (spanish.endsWith("dad")) {
            equivalents.add(spanish.replace("dad", "ty"));
        }
        if (spanish.endsWith("er√≠a")) {
            equivalents.add(spanish.replace("er√≠a", "ery"));
        }

        // Sustituciones autom√°ticas de caracteres
        String englishified = spanish
                .replace("√±", "n")
                .replace("√°", "a")
                .replace("√©", "e")
                .replace("√≠", "i")
                .replace("√≥", "o")
                .replace("√∫", "u")
                .replace("√º", "u");

        if (!englishified.equals(spanish)) {
            equivalents.add(englishified);
        }

        // Conceptos autom√°ticos por contexto
        equivalents.addAll(generateContextualEquivalents(spanish));

        return equivalents;
    }

    // üéØ EQUIVALENTES CONTEXTUALES AUTOM√ÅTICOS
    private static List<String> generateContextualEquivalents(String word) {
        List<String> equivalents = new ArrayList<>();

        // An√°lisis autom√°tico por longitud y caracter√≠sticas
        if (word.length() <= 4) {
            // Palabras cortas = servicios b√°sicos
            equivalents.addAll(Arrays.asList("service", "basic", "main", "key"));
        }

        // An√°lisis por patrones de letras
        if (word.contains("piscin") || word.contains("pool")) {
            equivalents.addAll(Arrays.asList("pool", "water", "swim", "swimming"));
        }
        if (word.contains("hotel") || word.contains("casa")) {
            equivalents.addAll(Arrays.asList("hotel", "home", "house", "room"));
        }
        if (word.contains("comid") || word.contains("food")) {
            equivalents.addAll(Arrays.asList("food", "restaurant", "dining", "eat"));
        }
        if (word.contains("wifi") || word.contains("internet")) {
            equivalents.addAll(Arrays.asList("wifi", "internet", "network", "connection"));
        }

        return equivalents;
    }

    // üîä VARIACIONES FON√âTICAS AUTOM√ÅTICAS
    private static List<String> generatePhoneticVariations(String word) {
        List<String> variations = new ArrayList<>();

        // Variaciones autom√°ticas comunes
        variations.add(word.replace("ph", "f"));
        variations.add(word.replace("ck", "k"));
        variations.add(word.replace("qu", "k"));
        variations.add(word.replace("x", "ks"));

        // Plurales autom√°ticos
        if (!word.endsWith("s")) {
            variations.add(word + "s");
        }
        if (word.endsWith("s") && word.length() > 2) {
            variations.add(word.substring(0, word.length() - 1));
        }

        return variations;
    }

    // üé® 3. TRADUCCI√ìN AUTOM√ÅTICA (Simulada inteligente)
    private static List<OnlineIcon> searchWithAutoTranslation(String query) {
        List<OnlineIcon> results = new ArrayList<>();

        // Simular API de traducci√≥n con l√≥gica inteligente
        String translatedQuery = performSmartTranslation(query);
        if (!translatedQuery.equals(query)) {
            results.addAll(searchInMaterialIcons(translatedQuery));
        }

        return results;
    }

    // üîÑ TRADUCCI√ìN INTELIGENTE AUTOM√ÅTICA
    private static String performSmartTranslation(String text) {
        // Simulaci√≥n de Google Translate con patrones inteligentes
        String result = text.toLowerCase();

        // Autom√°tica basada en patrones m√°s comunes
        Map<String, String> autoPatterns = new HashMap<>();
        autoPatterns.put(".*casa.*|.*hogar.*", "home");
        autoPatterns.put(".*piscina.*|.*alberca.*", "pool");
        autoPatterns.put(".*comida.*|.*restaurante.*", "food");
        autoPatterns.put(".*gimnasio.*", "gym");
        autoPatterns.put(".*spa.*|.*masaje.*", "spa");
        autoPatterns.put(".*wifi.*|.*internet.*", "wifi");
        autoPatterns.put(".*taxi.*|.*coche.*", "transport");
        autoPatterns.put(".*telefono.*|.*tel√©fono.*", "phone");

        for (Map.Entry<String, String> pattern : autoPatterns.entrySet()) {
            if (text.matches(pattern.getKey())) {
                return pattern.getValue();
            }
        }

        return text;
    }

    // üéØ B√öSQUEDA EN MATERIAL ICONS
    private static List<OnlineIcon> searchInMaterialIcons(String query) {
        List<OnlineIcon> icons = new ArrayList<>();

        // Base de iconos Material Design m√°s completa
        String[] materialIconKeys = {
                "home", "hotel", "bed", "room_service", "spa", "pool", "fitness_center",
                "restaurant", "local_cafe", "local_bar", "wifi", "phone", "tv", "ac_unit",
                "local_taxi", "directions_car", "flight", "local_parking", "security",
                "local_laundry_service", "cleaning_services", "star", "favorite",
                "thumb_up", "verified", "info", "settings", "help", "search"
        };

        for (String iconKey : materialIconKeys) {
            // B√∫squeda flexible autom√°tica
            if (iconKey.contains(query) || query.contains(iconKey) ||
                    calculateSimilarity(query, iconKey) > 0.3) {

                String displayName = iconKey.replace("_", " ");
                displayName = capitalize(displayName);
                icons.add(new OnlineIcon(displayName, iconKey, "Material"));
            }
        }

        return icons;
    }

    // üìä RELACIONADOS AUTOM√ÅTICOS
    private static List<String> generateRelatedConcepts(String english) {
        List<String> related = new ArrayList<>();

        // Generaci√≥n autom√°tica de conceptos relacionados
        if (english.contains("home") || english.contains("house")) {
            related.addAll(Arrays.asList("hotel", "room", "building", "residence"));
        }
        if (english.contains("food") || english.contains("eat")) {
            related.addAll(Arrays.asList("restaurant", "dining", "kitchen", "meal"));
        }
        if (english.contains("water") || english.contains("swim")) {
            related.addAll(Arrays.asList("pool", "spa", "bath", "shower"));
        }

        return related;
    }

    // üî¢ SIMILITUD AUTOM√ÅTICA
    private static double calculateSimilarity(String s1, String s2) {
        if (s1.equals(s2)) return 1.0;
        if (s1.contains(s2) || s2.contains(s1)) return 0.7;

        // Algoritmo autom√°tico simple pero efectivo
        int maxLen = Math.max(s1.length(), s2.length());
        if (maxLen == 0) return 1.0;

        int commonChars = 0;
        for (char c : s1.toCharArray()) {
            if (s2.indexOf(c) >= 0) commonChars++;
        }

        return (double) commonChars / maxLen;
    }

    // üî§ CAPITALIZACI√ìN AUTOM√ÅTICA
    private static String capitalize(String text) {
        if (text == null || text.isEmpty()) return text;
        return text.substring(0, 1).toUpperCase() + text.substring(1);
    }
}